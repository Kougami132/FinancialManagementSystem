// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FMSystem.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\Pages\Index.razor"
using AntDesign.Charts;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 109 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\Pages\Index.razor"
       

    private IEnumerable<Record> records;
    private IEnumerable<Category> categories;
    private IEnumerable<Account> accounts;
    private IEnumerable<Record> showingRecords;
    private string period = "all";
    private double input = 0;
    private double output = 0;
    private IChartComponent donut;
    private IChartComponent radar;
    private IChartComponent rose;
    private IChartComponent line;
    private InputOrOutput type = InputOrOutput.INPUT;
    private string cORa = "category";
    private bool loading = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        records = await Http.GetFromJsonAsync<Record[]>("Api/Record/GetRecord");
        categories = await Http.GetFromJsonAsync<Category[]>("Api/Category/GetCategory");
        accounts = await Http.GetFromJsonAsync<Account[]>("Api/Account/GetAccount");
        if (records.Count() != 0)
        {
            await Filter();
        }
        else
        {
            loading = true;
        }
    }

    private async Task Filter()
    {
        DateTime now = Convert.ToDateTime(DateTime.Now.ToShortDateString());
        int days = 0;
        if (period == "month") days = 30;
        else if (period == "week") days = 7;
        else if (period == "day") days = 1;
        if (period == "all")
        {
            showingRecords = records;
        }
        else
        {
            showingRecords = records.Where(i => (now - i.CreateTime).Days < days);
        }
        await UpdateSum();
    }

    private async Task UpdateSum()
    {
        input = 0;
        output = 0;

        foreach (Record i in showingRecords)
        {
            if (i.Type == InputOrOutput.INPUT)
            {
                input += i.Value;
            }
            else if (i.Type == InputOrOutput.OUTPUT)
            {
                output += i.Value;
            }
        }
        await UpdateChartData();
        await UpdateLineData();
    }

    private async Task UpdateChartData()
    {
        if (type == InputOrOutput.INPUT && input == 0 || type == InputOrOutput.OUTPUT && output == 0)
        {
            loading = true;
            return;
        }
        else
        {
            loading = false;
        }
        List<CircleDto> data = new();
        foreach (Record i in showingRecords)
        {
            if (i.Type == type)
            {
                if (cORa == "category")
                {
                    if (!categories.Any(j => j.Id == i.Category))
                    {
                        if (data.Any(j => j.Type == ""))
                        {
                            data[data.FindIndex(j => j.Type == "")].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto("", i.Value));
                        }
                    }
                    else
                    {
                        if (data.Any(j => j.Type == categories.First(k => k.Id == i.Category).Name))
                        {
                            data[data.FindIndex(j => j.Type == categories.First(k => k.Id == i.Category).Name)].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto(categories.First(k => k.Id == i.Category).Name, i.Value));
                        }
                    }
                }
                else if (cORa == "account")
                {
                    if (!accounts.Any(j => j.Id == i.Account))
                    {
                        if (data.Any(j => j.Type == ""))
                        {
                            data[data.FindIndex(j => j.Type == "")].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto("", i.Value));
                        }
                    }
                    else
                    {
                        if (data.Any(j => j.Type == accounts.First(k => k.Id == i.Account).Name))
                        {
                            data[data.FindIndex(j => j.Type == accounts.First(k => k.Id == i.Account).Name)].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto(accounts.First(k => k.Id == i.Account).Name, i.Value));
                        }
                    }
                }

            }
        }
        if (data.Any(i => i.Type == "" || i.Type == null))
        {
            data[data.FindIndex(i => i.Type == "" || i.Type == null)].Type = "其它";
        }
        await donut.ChangeData(data);
        await donut.ChangeData(data);               //fix chart bug
        await donut.UpdateConfig(donutConfig);      //fix chart bug
        await rose.ChangeData(data);
        await radar.ChangeData(data);
    }

    private async Task UpdateLineData()
    {
        List<LineDto> data = new();
        data.AddRange(new List<LineDto>(Enumerable.Range(1, 14).Select(i => new LineDto()
        {
            date = DateTime.Today.AddDays(- (i - 1) % 7).ToShortDateString(),
            value = 0,
            type = i <= 7 ? "收入" : "支出"
        })));
        DateTime now = Convert.ToDateTime(DateTime.Now.ToShortDateString());
        for (int i = 0; i < records.Count(); i++)
        {
            Record currentRecord = records.ElementAt(i);
            int day = (now - currentRecord.CreateTime).Days;
            if (day < 7)
            {
                if (currentRecord.Type == InputOrOutput.INPUT)
                {
                    data[day].value += currentRecord.Value;
                }
                else if (currentRecord.Type == InputOrOutput.OUTPUT)
                {
                    data[day + 7].value += currentRecord.Value;
                }
            }
        }
        await line.ChangeData(data);
    }

    private readonly DonutConfig donutConfig = new DonutConfig
    {
        ForceFit = true,
        Radius = 0.8,
        Padding = "auto",
        AngleField = "value",
        ColorField = "type"
    };

    private readonly RadarConfig radarConfig = new RadarConfig
    {
        AngleField = "type",
        RadiusField = "value",
        RadiusAxis = new ValueAxis
        {
            Grid = new BaseAxisGrid
            {
                AlternateColor = new[] { "rgba(0, 0, 0, 0.04)", null }
            }
        },
        Area = new RadarViewConfigArea
        {
            Visible = false
        },
        Point = new RadarViewConfigPoint
        {
            Visible = true
        }
    };

    private readonly RoseConfig roseConfig = new RoseConfig
    {
        ForceFit = true,
        Radius = 0.8,
        RadiusField = "value",
        CategoryField = "type",
        ColorField = "type",
        Label = new RoseLabel
        {
            Visible = true,
            Type = "outer"
        }
    };

    private readonly LineConfig lineConfig = new LineConfig
    {
        Title = new AntDesign.Charts.Title
        {
            Visible = true,
            Text = "收支图"
        },
        Description = new Description
        {
            Visible = true,
            Text = ""
        },
        Padding = "auto",
        ForceFit = true,
        XField = "date",
        YField = "value",
        SeriesField = "type",
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        }
    };



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MessageService messageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
