// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace FMSystem.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using FMSystem.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using AntDesign;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\Pages\Categories.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/categories")]
    public partial class Categories : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 115 "E:\Project C#\FinancialManagementSystem\FMSystem.Client\Pages\Categories.razor"
       

    private Category[] categories, showingCategories = new List<Category>().ToArray();
    private IEnumerable<Category> selectedCategories;
    private string searchName, type;
    int owner;
    private bool dwVisible1, dwVisible2, loading1, loading2, deleteLoading, modalVisible;
    private AntDesign.Form<Category> form1, form2;
    private Category newCategory = new() { Type = InputOrOutput.INPUT };
    private Category editCategory = new();
    private int tablePageIndex;

    private AntDesign.Table<Category> table;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await authenticationStateTask;
        ClaimsPrincipal user = authState.User;

        owner = (await Http.GetFromJsonAsync<User>("Api/User/GetSelf")).Id;
        await RefrashData();
    }

    private async Task RefrashData()
    {
        categories = await Http.GetFromJsonAsync<Category[]>("Api/Category/GetCategory");
        await RefrashTable();
    }

    private async Task RefrashTable()
    {
        showingCategories = categories;

        //过滤种类
        if (type == "input")
        {
            showingCategories = showingCategories.Where(i => i.Type == InputOrOutput.INPUT).ToArray();
        }
        else if (type == "output")
        {
            showingCategories = showingCategories.Where(i => i.Type == InputOrOutput.OUTPUT).ToArray();
        }

        //过滤名称
        if (searchName != null && searchName != "")
        {
            showingCategories = showingCategories.Where(i => i.Name.ToLower().Contains(searchName.ToLower())).ToArray();
        }
    }



    public class Option
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private List<Option> options = new List<Option>()
{
        new Option {Value = "all", Name = "全部"},
        new Option {Value = "input", Name = "收入"},
        new Option {Value = "output", Name = "支出"}
    };

    public class realOption
    {
        public InputOrOutput Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private List<realOption> newOptions = new List<realOption>()
{
        new realOption {Value = InputOrOutput.INPUT, Name = "收入"},
        new realOption {Value = InputOrOutput.OUTPUT, Name = "支出"}
    };

    private async Task NewOnSubmit()
    {
        Response response = await Http.GetFromJsonAsync<Response>("Api/Category/IsCategoryExist?name=" + newCategory.Name);
        if (response.Msg == "Yes")
        {
            messageService.Error("分类已存在");
        }
        else
        {
            loading1 = true;
            newCategory.User = owner;
            form1.Submit();
        }
    }

    private async Task NewOnFinish(EditContext newContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Category/AddCategory", newContext.Model);
        Response response = await responseMsg.Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            newCategory = new() { Type = InputOrOutput.INPUT };  //清空表单
            loading1 = false;
            dwVisible1 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading1 = false;
            messageService.Error("提交失败");
        }
    }

    private async Task NewOnFinishFailed(EditContext editContext)
    {
        loading1 = false;
        messageService.Error("提交失败");
    }

    private void OnEdit()
    {
        if (selectedCategories == null || selectedCategories.Count() == 0)
        {
            messageService.Error("请先选中一行数据");
        }
        else if (selectedCategories.Count() != 1)
        {
            messageService.Error("只能对单项进行编辑");
        }
        else
        {
            editCategory = new()
            {
                Id = selectedCategories.First().Id,
                Name = selectedCategories.First().Name,
                Type = selectedCategories.First().Type,
                Description = selectedCategories.First().Description
            };
            dwVisible2 = true;
        }
    }

    private async Task EditOnSubmit()
    {
        Response response = await Http.GetFromJsonAsync<Response>("Api/Category/IsCategoryExist?name=" + editCategory.Name);
        if (response.Msg == "Yes" && editCategory.Name != selectedCategories.First().Name)
        {
            messageService.Error("分类名已存在");
        }
        else
        {
            loading2 = true;
            editCategory.User = owner;
            form2.Submit();
        }
    }

    private async Task EditOnFinish(EditContext editContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Category/EditCategory", editContext.Model);
        Response response = await (responseMsg).Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            loading2 = false;
            dwVisible2 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading2 = false;
            messageService.Error("提交失败");
        }

    }

    private async Task EditOnFinishFailed(EditContext editContext)
    {
        loading2 = false;
        messageService.Error("提交失败");
    }

    private async Task OnDelete()
    {
        modalVisible = false;
        deleteLoading = true;
        int[] ids = selectedCategories.Select(i => i.Id).ToArray();
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Category/DeleteCategory", ids);
        Response response = await responseMsg.Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            deleteLoading = false;
            messageService.Success("删除成功");
        }
        else
        {
            deleteLoading = false;
            messageService.Error("删除失败");
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MessageService messageService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
