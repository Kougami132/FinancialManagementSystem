@inject MessageService messageService
@inject HttpClient Http
@using System.Security.Claims



<div class="back_card" style="margin-bottom: 0;">
    <div style="float: left; margin-right: 4px;">
        <Search Placeholder="搜索用户" ValueChanged="SearchValueChanged" Style="width: 100px;" OnChange="RefrashTable" ClassicSearchIcon />
    </div>
    <Select DataSource="@options"
            ValueChanged="PermissionChanged"
            DefaultValue="@("all")"
            ValueName="@nameof(Option.Value)"
            LabelName="@nameof(Option.Name)"
            DisabledName="@nameof(Option.IsDisabled)"
            OnSelectedItemChanged="@(async(i) => { await RefrashTable.InvokeAsync(); })"
            style="width: 100px; text-align: center;">
    </Select>
    <Button Type="primary" Icon="plus" OnClick="@(()=> { dwVisible1 = true; })">新增用户</Button>
    <Button Icon="edit" OnClick=" OnEdit">修改信息</Button>
</div>

<Drawer Closable="true" Width="360" Visible="dwVisible1" Title=@("新增用户") OnClose="@(()=> { dwVisible1 = false; })">
    <Form @ref="form1"
          Loading="loading1"
          Layout="@FormLayout.Vertical"
          Model="@newUser"
          ValidateOnChange="true"
          OnFinish="NewOnFinish"
          OnFinishFailed="NewOnFinishFailed"
          Style="padding: 12px;">
        <FormItem Label="用户名">
            <Input @bind-Value="@context.UserName" Placeholder="例: test132" MaxLength="16" />
        </FormItem>
        <FormItem Label="密码">
            <InputPassword @bind-Value="@context.UserPwd" Placeholder="例: 123456" MaxLength="32" />
        </FormItem>
        <FormItem Label="权限组">
            <Select DataSource="@newOptions"
                    @bind-Value="@context.Permission"
                    ValueName="@nameof(realOption.Value)"
                    LabelName="@nameof(realOption.Name)"
                    DisabledName="@nameof(realOption.IsDisabled)"
                    Style="width: 100px; text-align: center;">
            </Select>
        </FormItem>
        <FormItem Label="QQ">
            <Input @bind-Value="@context.QQ" Placeholder="例: 1234567890" />
        </FormItem>
        <FormItem Label="邮箱">
            <Input @bind-Value="@context.Email" Placeholder="例: test132@gmail.com" />
        </FormItem>
        <FormItem Label="手机号">
            <Input @bind-Value="@context.PhoneNumber" Placeholder="例: 18324221977" />
        </FormItem>
        <FormItem Label="地址">
            <Input @bind-Value="@context.Address" Placeholder="例: 瓯海区 新桥街道 六虹桥路1000号" />
        </FormItem>
        <FormItem WrapperColOffset="6" WrapperColSpan="24">
            <Button Type="default" OnClick="@(()=> { dwVisible1 = false; })">取消</Button>
            <Button Type="primary" OnClick="NewOnSubmit">提交</Button>
        </FormItem>
    </Form>
</Drawer>

<Drawer Closable="true" Width="360" Visible="dwVisible2" Title=@("修改信息") OnClose="@(()=> { dwVisible2 = false; })">
    <Form @ref="form2"
          Loading="loading2"
          Layout="@FormLayout.Vertical"
          Model="@editUser"
          ValidateOnChange="true"
          OnFinish="EditOnFinish"
          OnFinishFailed="EditOnFinishFailed"
          Style="padding: 12px;">
        <FormItem Label="用户名">
            <Input @bind-Value="@context.UserName" Placeholder="例: test132" MaxLength="16" />
        </FormItem>
        <FormItem Label="密码">
            <InputPassword @bind-Value="@context.UserPwd" Placeholder="例: 123456" MaxLength="32" />
        </FormItem>
        <FormItem Label="权限组">
            <Select DataSource="@newOptions"
                    @bind-Value="@context.Permission"
                    ValueName="@nameof(realOption.Value)"
                    LabelName="@nameof(realOption.Name)"
                    DisabledName="@nameof(realOption.IsDisabled)"
                    Style="width: 100px; text-align: center;"
                    Disabled="@self">
            </Select>
        </FormItem>
        <FormItem Label="QQ">
            <Input @bind-Value="@context.QQ" Placeholder="例: 1234567890" />
        </FormItem>
        <FormItem Label="邮箱">
            <Input @bind-Value="@context.Email" Placeholder="例: test132@gmail.com" />
        </FormItem>
        <FormItem Label="手机号">
            <Input @bind-Value="@context.PhoneNumber" Placeholder="例: 18324221977" />
        </FormItem>
        <FormItem Label="地址">
            <Input @bind-Value="@context.Address" Placeholder="例: 瓯海区 新桥街道 六虹桥路1000号" />
        </FormItem>
        <FormItem WrapperColOffset="6" WrapperColSpan="24">
            <Button Type="default" OnClick="@(()=> { dwVisible2 = false; })">取消</Button>
            <Button Type="primary" OnClick="EditOnSubmit">提交</Button>
        </FormItem>
    </Form>
</Drawer>
@code {

    [Parameter]
    public string SearchValue { get; set; }
    [Parameter]
    public EventCallback<string> SearchValueChanged { get; set; }
    [Parameter]
    public string Permission { get; set; }
    [Parameter]
    public EventCallback<string> PermissionChanged { get; set; }
    [Parameter]
    public IEnumerable<User> Selected { get; set; }
    [Parameter]
    public EventCallback<IEnumerable<User>> SelectedChanged { get; set; }
    [Parameter]
    public EventCallback RefrashData { get; set; }
    [Parameter]
    public EventCallback RefrashTable { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool dwVisible1, dwVisible2, loading1, loading2;
    private AntDesign.Form<User> form1, form2;
    private User newUser = new() { Permission = Permissions.NORMAL };
    private User editUser = new();
    private bool self = false;


    public class Option
    {
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private List<Option> options = new List<Option>()
{
        new Option {Value = "all", Name = "全部"},
        new Option {Value = "admin", Name = "管理员"},
        new Option {Value = "normal", Name = "普通用户"}
    };

    public class realOption
    {
        public Permissions Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private List<realOption> newOptions = new List<realOption>()
{
        new realOption {Value = Permissions.ADMIN, Name = "管理员"},
        new realOption {Value = Permissions.NORMAL, Name = "普通用户"}
    };



    private async Task NewOnSubmit()
    {
        Response response = await Http.GetFromJsonAsync<Response>("Api/User/IsUserExist?username=" + newUser.UserName);
        if (response.Msg == "Yes")
        {
            messageService.Error("用户名已存在");
        }
        else
        {
            loading1 = true;
            form1.Submit();
        }
    }

    private async Task NewOnFinish(EditContext newContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/User/AddUser", newContext.Model);
        Response response = await responseMsg.Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData.InvokeAsync();   //刷新表格
            newUser = new User() { Permission = Permissions.NORMAL };  //清空表单
            loading1 = false;
            dwVisible1 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading1 = false;
            messageService.Error("提交失败");
        }
    }

    private async Task NewOnFinishFailed(EditContext editContext)
    {
        loading1 = false;
        messageService.Error("提交失败");
    }

    private void OnEdit()
    {
        if (Selected == null || Selected.Count() == 0)
        {
            messageService.Error("请先选中一行数据");
        }
        else if (Selected.Count() != 1)
        {
            messageService.Error("只能对单项进行编辑");
        }
        else
        {
            editUser = new()
            {
                Id = Selected.First().Id,
                UserName = Selected.First().UserName,
                UserPwd = Selected.First().UserPwd,
                Permission = Selected.First().Permission,
                QQ = Selected.First().QQ,
                Email = Selected.First().Email,
                PhoneNumber = Selected.First().PhoneNumber,
                Address = Selected.First().Address
            };
            dwVisible2 = true;

            //不得修改自己的权限组
            AuthenticationState authState = authenticationStateTask.Result;
            ClaimsPrincipal user = authState.User;
            if (editUser.UserName == user.Identity.Name)
            {
                self = true;
            }
            else
            {
                self = false;
            }
        }
    }

    private async Task EditOnSubmit()
    {
        Response response = await Http.GetFromJsonAsync<Response>("Api/User/IsUserExist?username=" + editUser.UserName);
        if (response.Msg == "Yes" && editUser.UserName.ToLower() != Selected.First().UserName.ToLower())
        {
            messageService.Error("用户名已存在");
        }
        else
        {
            loading2 = true;
            form2.Submit();
        }
    }

    private async Task EditOnFinish(EditContext editContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/User/EditUser", editContext.Model);
        Response response = await (responseMsg).Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData.InvokeAsync();   //刷新表格
            loading2 = false;
            dwVisible2 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading2 = false;
            messageService.Error("提交失败");
        }

    }

    private async Task EditOnFinishFailed(EditContext editContext)
    {
        loading2 = false;
        messageService.Error("提交失败");
    }


}
