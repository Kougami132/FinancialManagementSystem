@page "/records"

@inject HttpClient Http
@inject MessageService messageService
@using System.Security.Claims



<FMSystem.Client.Components.Record.FilterAndInput @bind-categories="categories"
                                                  @bind-accounts="accounts"
                                                  @bind-Type="type"
                                                  @bind-Category="category"
                                                  @bind-Account="account"
                                                  @bind-DateFilter="dateFilter"
                                                  @bind-Selected="selectedRecords"
                                                  RefrashData="RefrashData"
                                                  RefrashTable="RefrashTable">
</FMSystem.Client.Components.Record.FilterAndInput>

<FMSystem.Client.Components.Record.TableInput Obj="table"
                                              Data="showingRecords"
                                              @bind-Selected="selectedRecords">
</FMSystem.Client.Components.Record.TableInput>



@code {

    private Record[] records, showingRecords = new List<Record>().ToArray();
    private IEnumerable<Category> categories;
    private IEnumerable<Account> accounts;
    private IEnumerable<Record> selectedRecords;
    private string type = "all";
    private int category = -1, account = -1;
    private DateTime?[] dateFilter;

    private AntDesign.Table<Record> table;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<Category[]>("Api/Category/GetCategory");
        accounts = await Http.GetFromJsonAsync<Account[]>("Api/Account/GetAccount");
        await RefrashData();
    }

    private async Task RefrashData()
    {
        records = await Http.GetFromJsonAsync<Record[]>("Api/Record/GetRecord");
        await RefrashTable();
    }

    private async Task RefrashTable()
    {
        showingRecords = records;

        //过滤收/支
        if (type == "input")
        {
            showingRecords = showingRecords.Where(i => i.Type == InputOrOutput.INPUT).ToArray();
        }
        else if (type == "output")
        {
            showingRecords = showingRecords.Where(i => i.Type == InputOrOutput.OUTPUT).ToArray();
        }

        //过滤分类

        if (category == -1)
        {
            //全部
        }
        else if (category == -2)
        {
            showingRecords = showingRecords.Where(i => !categories.Any(j => j.Id == i.Category)).ToArray();
        }
        else
        {
            showingRecords = showingRecords.Where(i => i.Category == category).ToArray();
        }

        //过滤账户
        if (account == -1)
        {
            //全部
        }
        else if (account == -2)
        {
            showingRecords = showingRecords.Where(i => !accounts.Any(j => j.Id == i.Account)).ToArray();
        }
        else
        {
            showingRecords = showingRecords.Where(i => i.Account == account).ToArray();
        }

        //过滤日期
        if (dateFilter[0] != null)
        {
            DateTime date = Convert.ToDateTime(dateFilter[0]);
            date = Convert.ToDateTime(date.ToShortDateString());
            showingRecords = showingRecords.Where(i => DateTime.Compare(i.CreateTime, date) >= 0).ToArray();
        }
        if (dateFilter[1] != null)
        {
            DateTime date = Convert.ToDateTime(dateFilter[1]);
            date = Convert.ToDateTime(date.ToShortDateString());
            showingRecords = showingRecords.Where(i => DateTime.Compare(i.CreateTime, date) <= 0).ToArray();
        }
    }

}
