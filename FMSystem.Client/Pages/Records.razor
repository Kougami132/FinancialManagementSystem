@page "/records"

@inject HttpClient Http
@inject MessageService messageService
@using System.Security.Claims
@using System.Text.Json

<PageTitle Title="记录管理 - 个人财务管理系统" />

<div style="display: flex; justify-content: space-between;">
    <div class="back_card" style="margin-bottom: 0;">
        <RadioGroup @bind-Value="type" ButtonStyle="solid" DefaultValue="@("all")" OnChange="@(async(string i) => { await RefrashSelect(i); await RefrashTable(); })">
            <Radio RadioButton Value="@("all")">全部</Radio>
            <Radio RadioButton Value="@("input")">收入</Radio>
            <Radio RadioButton Value="@("output")">支出</Radio>
        </RadioGroup>
        <Select @ref="fixSelect1"
                DataSource="@categoryOptions"
                @bind-Value="category"
                DefaultValue="-1"
                ValueName="@nameof(Option<int>.Value)"
                LabelName="@nameof(Option<int>.Name)"
                DisabledName="@nameof(Option<int>.IsDisabled)"
                OnSelectedItemChanged="@(async(i) => { await RefrashTable(); })"
                style="width: 100px; text-align: center;">
        </Select>
        <Select @ref="fixSelect2"
                DataSource="@accountOptions"
                @bind-Value="account"
                DefaultValue="-1"
                ValueName="@nameof(Option<int>.Value)"
                LabelName="@nameof(Option<int>.Name)"
                DisabledName="@nameof(Option<int>.IsDisabled)"
                OnSelectedItemChanged="@(async(i) => { await RefrashTable(); })"
                style="width: 100px; text-align: center;">
        </Select>
        <RangePicker @bind-Value="dateFilter" TValue="DateTime?[]" AllowClear OnChange="@(async(i) => { await RefrashTable(); })" OnClearClick="@(async(i) => { await RefrashTable(); })" />
    </div>

    <div class="back_card" style="margin-bottom: 0;">
        <Button Type="primary" Icon="plus" OnClick="@(()=> { newRecord.CreateTime = DateTime.Today; dwVisible1 = true; RefrashNewSelect(); })">新增记录</Button>
        <Button Icon="edit" OnClick=" OnEdit">修改信息</Button>
        <Button Loading="deleteLoading" Type="dashed" Danger OnClick="@(() => { if (selectedRecords != null && selectedRecords.Count() != 0) modalVisible = true; })">删除</Button>
    </div>
</div>

<Drawer Closable="true" Width="360" Visible="dwVisible1" Title=@("新增账户") OnClose="@(()=> { dwVisible1 = false; })">
    <Form @ref="form1"
          Loading="loading1"
          Layout="@FormLayout.Vertical"
          Model="@newRecord"
          ValidateOnChange="true"
          OnFinish="NewOnFinish"
          OnFinishFailed="NewOnFinishFailed"
          Style="padding: 12px;">
        <FormItem Label="收/支、分类">
            <RadioGroup @bind-Value="@context.Type" ButtonStyle="solid" DefaultValue="@InputOrOutput.INPUT" OnChange="@((InputOrOutput i) => { RefrashNewSelect(); })">
                <Radio RadioButton Value="@InputOrOutput.INPUT">收入</Radio>
                <Radio RadioButton Value="@InputOrOutput.OUTPUT">支出</Radio>
            </RadioGroup>
            <Select DataSource="@newCategoryOptions"
                    @bind-Value="@context.Category"
                    ValueName="@nameof(Option<int>.Value)"
                    LabelName="@nameof(Option<int>.Name)"
                    DisabledName="@nameof(Option<int>.IsDisabled)"
                    Style="width: 100px; text-align: center;">
            </Select>
        </FormItem>
        <FormItem Label="账户">
            <Select DataSource="@newAccountOptions"
                    @bind-Value="@context.Account"
                    ValueName="@nameof(Option<int>.Value)"
                    LabelName="@nameof(Option<int>.Name)"
                    DisabledName="@nameof(Option<int>.IsDisabled)"
                    Style="width: 100px; text-align: center;">
            </Select>
        </FormItem>
        <FormItem Label="价格">
            <Input @bind-Value="@context.Value" type="number">
            <Prefix> ￥ </Prefix>
            <Suffix>RMB </Suffix>
            </Input>
        </FormItem>
        <FormItem Label="时间">
            <DatePicker @bind-Value="@context.CreateTime" DefaultPickerValue="@DateTime.Now" Format="yyyy年MM月dd日" />
        </FormItem>
        <FormItem Label="说明">
            <Input @bind-Value="@context.Description" />
        </FormItem>
        <FormItem WrapperColOffset="6" WrapperColSpan="24">
            <Button Type="default" OnClick="@(()=> { dwVisible1 = false; })">取消</Button>
            <Button Type="primary" OnClick="NewOnSubmit">提交</Button>
        </FormItem>
    </Form>
</Drawer>

<Drawer Closable="true" Width="360" Visible="dwVisible2" Title=@("修改信息") OnClose="@(()=> { dwVisible2 = false; })">
    <Form @ref="form2"
          Loading="loading2"
          Layout="@FormLayout.Vertical"
          Model="@editRecord"
          ValidateOnChange="true"
          OnFinish="EditOnFinish"
          OnFinishFailed="EditOnFinishFailed"
          Style="padding: 12px;">
        <FormItem Label="收/支、分类">
            <RadioGroup @bind-Value="@context.Type" ButtonStyle="solid" OnChange="@((InputOrOutput i) => { RefrashNewSelect(); })">
                <Radio RadioButton Value="@InputOrOutput.INPUT">收入</Radio>
                <Radio RadioButton Value="@InputOrOutput.OUTPUT">支出</Radio>
            </RadioGroup>
            <Select DataSource="@newCategoryOptions"
                    @bind-Value="@context.Category"
                    ValueName="@nameof(Option<int>.Value)"
                    LabelName="@nameof(Option<int>.Name)"
                    DisabledName="@nameof(Option<int>.IsDisabled)"
                    Style="width: 100px; text-align: center;">
            </Select>
        </FormItem>
        <FormItem Label="账户">
            <Select DataSource="@newAccountOptions"
                    @bind-Value="@context.Account"
                    ValueName="@nameof(Option<int>.Value)"
                    LabelName="@nameof(Option<int>.Name)"
                    DisabledName="@nameof(Option<int>.IsDisabled)"
                    Style="width: 100px; text-align: center;">
            </Select>
        </FormItem>
        <FormItem Label="价格">
            <Input @bind-Value="@context.Value" type="number">
            <Prefix> ￥ </Prefix>
            <Suffix>RMB </Suffix>
            </Input>
        </FormItem>
        <FormItem Label="时间">
            <DatePicker @bind-Value="@context.CreateTime" DefaultPickerValue="@context.CreateTime" Format="yyyy年MM月dd日" />
        </FormItem>
        <FormItem Label="说明">
            <Input @bind-Value="@context.Description" />
        </FormItem>
        <FormItem WrapperColOffset="6" WrapperColSpan="24">
            <Button Type="default" OnClick="@(()=> { dwVisible2 = false; })">取消</Button>
            <Button Type="primary" OnClick="EditOnSubmit">提交</Button>
        </FormItem>
    </Form>
</Drawer>

<Modal Title="提示"
       Width="300"
       Visible="@modalVisible"
       OnOk="OnDelete"
       OnCancel="@(() => { modalVisible = false; })">
    <Text>删除选中账户</Text>
</Modal>

<div class="back_card" style="padding-bottom: 80px;">
    <Table @ref="table" DataSource="@showingRecords" PageSize="10" HidePagination="true" @bind-PageIndex="@tablePageIndex" @bind-SelectedRows="selectedRecords">
        <Selection Key="@(context.Id.ToString())" />
        @{string p = @context.Type == InputOrOutput.INPUT ? "收入" : "支出";}
        <Column Title="收/支" Field="@p" />
        @{string c = categories.Any(i => i.Id == context.Category) ? categories.First(i => i.Id == context.Category).Name : "";}
        <Column Title="分类" Field="@c" />
        <Column Title="金额" Field="@context.Value" />
        @{string a = accounts.Any(i => i.Id == context.Account) ? accounts.First(i => i.Id == context.Account).Name : "";}
        <Column Title="账户" Field="@a" />
        <Column Title="创建时间" Field="@context.CreateTime.ToString("yyyy年MM月dd日")" />
        <Column Title="说明" Field="@context.Description" />
        <ActionColumn>
            <Button Type="link" OnClick="@(async i => { await ShowDetail(context.Id); })">详情</Button>
        </ActionColumn>
    </Table>
    <Pagination DefaultCurrent="1" Total="@showingRecords.Length" OnChange="@((args)=> { tablePageIndex = args.Page; })" Style="position: absolute; right: 24px; bottom: 24px;" />
</div>

<Modal Title="信息详情"
       Visible="@detailVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       OkText="@("修改")"
       CancelText="@("关闭")"
       Width="320"
       Centered>
    @{string p = detailRecord.Type == InputOrOutput.INPUT ? "收入" : "支出";}
    <p>收/支: @p</p>
    @{string c = categories.Any(i => i.Id == detailRecord.Category) ? categories.First(i => i.Id == detailRecord.Category).Name : "";}
    <p>分类: @c</p>
    <p>金额: @detailRecord.Value</p>
    @{string a = accounts.Any(i => i.Id == detailRecord.Account) ? accounts.First(i => i.Id == detailRecord.Account).Name : "";}
    <p>账户: @a</p>
    <p>创建时间: @detailRecord.CreateTime.ToString("yyyy年MM月dd日")</p>
    <p>说明: @detailRecord.Description</p>
</Modal>



@code {

    private Record[] records = new List<Record>().ToArray(), showingRecords = new List<Record>().ToArray();
    private IEnumerable<Category> categories = new Category[0];
    private IEnumerable<Account> accounts = new Account[0];
    private IEnumerable<Record> selectedRecords;
    private Record detailRecord;
    private string type = "all";
    private int category = -1, account = -1;
    private DateTime?[] dateFilter = new DateTime?[2];
    private int tablePageIndex;

    private AntDesign.Table<Record> table;

    protected override async Task OnInitializedAsync()
    {
        owner = (await Http.GetFromJsonAsync<User>("Api/User/GetSelf")).Id;
        categories = await Http.GetFromJsonAsync<Category[]>("Api/Category/GetCategory");
        accounts = await Http.GetFromJsonAsync<Account[]>("Api/Account/GetAccount");

        await RefrashSelect(type);
        RefrashNewSelect();

        accountOptions.Add(new Option<int> { Value = -1, Name = "全部" });
        newAccountOptions.Add(new Option<int> { Value = -2, Name = "" });
        for (int i = 0; i < accounts.Count(); i++)
        {
            accountOptions.Add(new Option<int> { Value = accounts.ElementAt(i).Id, Name = accounts.ElementAt(i).Name });
            newAccountOptions.Add(new Option<int> { Value = accounts.ElementAt(i).Id, Name = accounts.ElementAt(i).Name });
        }
        accountOptions.Add(new Option<int> { Value = -2, Name = "未分类" });
        fixSelect1.Value = -1;
        fixSelect2.Value = -1;
        category = -1;
        account = -1;

        await RefrashData();
    }

    private async Task RefrashData()
    {
        records = await Http.GetFromJsonAsync<Record[]>("Api/Record/GetRecord");
        await RefrashTable();
    }

    private async Task RefrashTable()
    {
        showingRecords = records;

        //过滤收/支
        if (type == "input")
        {
            showingRecords = showingRecords.Where(i => i.Type == InputOrOutput.INPUT).ToArray();
        }
        else if (type == "output")
        {
            showingRecords = showingRecords.Where(i => i.Type == InputOrOutput.OUTPUT).ToArray();
        }

        //过滤分类
        if (category == -1)
        {
            //全部
        }
        else if (category == -2)
        {
            showingRecords = showingRecords.Where(i => !categories.Any(j => j.Id == i.Category)).ToArray();
        }
        else
        {
            showingRecords = showingRecords.Where(i => i.Category == category).ToArray();
        }

        //过滤账户
        if (account == -1)
        {
            //全部
        }
        else if (account == -2)
        {
            showingRecords = showingRecords.Where(i => !accounts.Any(j => j.Id == i.Account)).ToArray();
        }
        else
        {
            showingRecords = showingRecords.Where(i => i.Account == account).ToArray();
        }

        //过滤日期
        if (dateFilter[0] != null)
        {
            DateTime date = Convert.ToDateTime(dateFilter[0]);
            date = Convert.ToDateTime(date.ToShortDateString());
            showingRecords = showingRecords.Where(i => DateTime.Compare(i.CreateTime, date) >= 0).ToArray();
        }
        if (dateFilter[1] != null)
        {
            DateTime date = Convert.ToDateTime(dateFilter[1]);
            date = Convert.ToDateTime(date.ToShortDateString());
            showingRecords = showingRecords.Where(i => DateTime.Compare(i.CreateTime, date) <= 0).ToArray();
        }
    }


    private bool dwVisible1, dwVisible2, loading1, loading2, deleteLoading, modalVisible, detailVisible;
    private AntDesign.Form<Record> form1, form2;
    private Record newRecord = new();
    private Record editRecord = new();
    private int owner { get; set; }
    private Select<int, Option<int>> fixSelect1, fixSelect2;

    public class Option<T>
    {
        public T Value { get; set; }
        public string Name { get; set; }
        public bool IsDisabled { get; set; }
    }

    private List<Option<int>> categoryOptions = new List<Option<int>>();
    private List<Option<int>> accountOptions = new();

    private List<Option<int>> newCategoryOptions = new List<Option<int>>();
    private List<Option<int>> newAccountOptions = new List<Option<int>>();


    private async Task RefrashSelect(string type)
    {
        categoryOptions = new()
        {
            new Option<int> { Value = -1, Name = "全部" }
        };
        for (int i = 0; i < categories.Count(); i++)
        {
            if (type == "all" || type == "input" && categories.ElementAt(i).Type == InputOrOutput.INPUT || type == "output" && categories.ElementAt(i).Type == InputOrOutput.OUTPUT)
            {
                categoryOptions.Add(new Option<int> { Value = categories.ElementAt(i).Id, Name = categories.ElementAt(i).Name });
            }
        }
        categoryOptions.Add(new Option<int> { Value = -2, Name = "未分类" });
        fixSelect1.Value = -1;
        category = -1;
    }

    private void RefrashNewSelect()
    {
        newCategoryOptions = new()
        {
            new Option<int> { Value = -2, Name = "" }
        };
        if (dwVisible1)
        {
            for (int i = 0; i < categories.Count(); i++)
            {
                if (newRecord.Type == categories.ElementAt(i).Type)
                {
                    newCategoryOptions.Add(new Option<int> { Value = categories.ElementAt(i).Id, Name = categories.ElementAt(i).Name });
                }
            }
            newRecord.Category = -2;
        }
        else if (dwVisible2)
        {
            for (int i = 0; i < categories.Count(); i++)
            {
                if (editRecord.Type == categories.ElementAt(i).Type)
                {
                    newCategoryOptions.Add(new Option<int> { Value = categories.ElementAt(i).Id, Name = categories.ElementAt(i).Name });
                }
            }
        }
    }

    private async Task NewOnSubmit()
    {
        loading1 = true;
        newRecord.User = owner;
        newRecord.CreateTime = Convert.ToDateTime(newRecord.CreateTime.ToShortDateString());
        if (newRecord.Category == null) newRecord.Category = -2;
        form1.Submit();
    }

    private async Task NewOnFinish(EditContext newContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Record/AddRecord", newContext.Model);
        Response response = await responseMsg.Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            newRecord = new();  //清空表单
            loading1 = false;
            dwVisible1 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading1 = false;
            messageService.Error("提交失败");
        }
    }

    private async Task NewOnFinishFailed(EditContext editContext)
    {
        loading1 = false;
        messageService.Error("提交失败");
    }

    private void OnEdit()
    {
        if (selectedRecords == null || selectedRecords.Count() == 0)
        {
            messageService.Error("请先选中一行数据");
        }
        else if (selectedRecords.Count() != 1)
        {
            messageService.Error("只能对单项进行编辑");
        }
        else
        {
            editRecord = new()
            {
                Id = selectedRecords.First().Id,
                Type = selectedRecords.First().Type,
                Category = selectedRecords.First().Category,
                Value = selectedRecords.First().Value,
                Account = selectedRecords.First().Account,
                CreateTime = selectedRecords.First().CreateTime,
                Description = selectedRecords.First().Description
            };
            dwVisible2 = true;
            RefrashNewSelect();
        }
    }

    private async Task EditOnSubmit()
    {
        loading2 = true;
        editRecord.User = owner;
        editRecord.CreateTime = Convert.ToDateTime(editRecord.CreateTime.ToShortDateString());
        if (editRecord.Category == null) editRecord.Category = -2;
        form2.Submit();
    }

    private async Task EditOnFinish(EditContext editContext)
    {
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Record/EditRecord", editContext.Model);
        Response response = await (responseMsg).Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            loading2 = false;
            dwVisible2 = false;
            messageService.Success("提交成功");
        }
        else
        {
            loading2 = false;
            messageService.Error("提交失败");
        }

    }

    private async Task EditOnFinishFailed(EditContext editContext)
    {
        loading2 = false;
        messageService.Error("提交失败");
    }

    private async Task OnDelete()
    {
        modalVisible = false;
        deleteLoading = true;
        int[] ids = selectedRecords.Select(i => i.Id).ToArray();
        HttpResponseMessage responseMsg = await Http.PostAsJsonAsync("Api/Record/DeleteRecord", ids);
        Response response = await responseMsg.Content.ReadFromJsonAsync<Response>();
        if (response.Type == 1)
        {
            await RefrashData();   //刷新表格
            deleteLoading = false;
            messageService.Success("删除成功");
        }
        else
        {
            deleteLoading = false;
            messageService.Error("删除失败");
        }
    }



    private async Task ShowDetail(int id)
    {
        detailRecord = records.FirstOrDefault(i => i.Id == id);
        detailVisible = true;
    }

    private async Task HandleOk()
    {
        editRecord = new()
        {
            Id = detailRecord.Id,
            Type = detailRecord.Type,
            Category = detailRecord.Category,
            Value = detailRecord.Value,
            Account = detailRecord.Account,
            CreateTime = detailRecord.CreateTime,
            Description = detailRecord.Description
        };
        detailVisible = false;
        dwVisible2 = true;
        RefrashNewSelect();
    }

    private async Task HandleCancel()
    {
        detailVisible = false;
    }
}
