@page "/accounts"

@inject HttpClient Http
@inject MessageService messageService
@using System.Security.Claims


<FMSystem.Client.Components.Account.FilterAndInput @bind-Owner="owner"
                                                   @bind-SearchValue="searchName"
                                                   @bind-Type="type"
                                                   @bind-Selected="selectedAccounts"
                                                   RefrashData="RefrashData"
                                                   RefrashTable="RefrashTable">
</FMSystem.Client.Components.Account.FilterAndInput>


<FMSystem.Client.Components.Account.TableInput Obj="table"
                                               Data="showingAccounts"
                                               @bind-Selected="selectedAccounts">
</FMSystem.Client.Components.Account.TableInput>


@code {

    private Account[] accounts, showingAccounts = new List<Account>().ToArray();
    private IEnumerable<Account> selectedAccounts;
    private string searchName, type;
    int owner;

    private AntDesign.Table<Account> table;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await authenticationStateTask;
        ClaimsPrincipal user = authState.User;
        owner = (await Http.GetFromJsonAsync<User>("Api/User/GetSelf")).Id;
        await RefrashData();
    }

    private async Task RefrashData()
    {
        accounts = await Http.GetFromJsonAsync<Account[]>("Api/Account/GetAccount");
        await RefrashTable();
    }

    private async Task RefrashTable()
    {
        showingAccounts = accounts;

        //过滤种类
        if (type == "bank")
        {
            showingAccounts = showingAccounts.Where(i => i.Type == PaymentType.BANK).ToArray();
        }
        else if (type == "cash")
        {
            showingAccounts = showingAccounts.Where(i => i.Type == PaymentType.CASH).ToArray();
        }
        else if (type == "online")
        {
            showingAccounts = showingAccounts.Where(i => i.Type == PaymentType.ONLINE).ToArray();
        }
        else if (type == "other")
        {
            showingAccounts = showingAccounts.Where(i => i.Type == PaymentType.OTHER).ToArray();
        }

        //过滤名称
        if (searchName != null && searchName != "")
        {
            showingAccounts = showingAccounts.Where(i => i.Name.ToLower().Contains(searchName.ToLower())).ToArray();
        }
    }

}
