@page "/"

@using AntDesign.Charts
@inject HttpClient Http
@inject MessageService messageService

<PageTitle Title="首页 - 个人财务管理系统" />

<div>
    <Row Justify="space-between" Align="bottom">
        <AntDesign.Col Flex=@("none")>
            @*<Row Justify="end">
                <AntDesign.Col>
                    <div class="back_card" style="margin-bottom: 0; margin-top: 0; padding: 16px;">
                        <Button Type="@ButtonType.Primary" Size="@ButtonSize.Small">TEST</Button>
                    </div>
                </AntDesign.Col>
            </Row>*@
            <div class="back_card">
                <Row Justify="space-around" Style="margin: 24px 0;">
                    <AntDesign.Col>
                        <RadioGroup @bind-Value="period" ButtonStyle="RadioButtonStyle.Solid" OnChange="@(async(string i) => { await Filter(); })" Size="large">
                            <Radio RadioButton Value="@("all")">总</Radio>
                            <Radio RadioButton Value="@("month")">月</Radio>
                            <Radio RadioButton Value="@("week")">周</Radio>
                            <Radio RadioButton Value="@("day")">日</Radio>
                        </RadioGroup>
                    </AntDesign.Col>
                </Row>
                <Row Align="middle" Style="margin: 24px 0;">
                    <AntDesign.Col Offset="4">
                        <Avatar Src="images/input.png"></Avatar>
                    </AntDesign.Col>
                    <AntDesign.Col Flex="@("auto")">
                        <Row Justify="space-around">
                            <AntDesign.Col>
                                <span style="font-size: 30px;">@input</span>
                            </AntDesign.Col>
                        </Row>
                    </AntDesign.Col>
                </Row>
                <Row Align="middle" Style="margin: 24px 0;">
                    <AntDesign.Col Offset="4">
                        <Avatar Src="images/output.png"></Avatar>
                    </AntDesign.Col>
                    <AntDesign.Col Flex="@("auto")">
                        <Row Justify="space-around">
                            <AntDesign.Col>
                                <span style="font-size: 30px;">@output</span>
                            </AntDesign.Col>
                        </Row>
                    </AntDesign.Col>
                </Row>
            </div>

            <div class="back_card" style="margin-bottom: 0;">
                <RadioGroup @bind-Value="type" ButtonStyle="RadioButtonStyle.Solid" OnChange="@(async(InputOrOutput i) => { await UpdateSum(); })">
                    <Radio RadioButton Value="@InputOrOutput.INPUT">收入</Radio>
                    <Radio RadioButton Value="@InputOrOutput.OUTPUT">支出</Radio>
                </RadioGroup>
                <Divider Type="DirectionVHType.Vertical" />
                <RadioGroup @bind-Value="cORa" ButtonStyle="RadioButtonStyle.Solid" OnChange="@(async(string i) => { await UpdateChartData(); })">
                    <Radio RadioButton Value="@("category")">按分类</Radio>
                    <Radio RadioButton Value="@("account")">按账户</Radio>
                </RadioGroup>
            </div>
        </AntDesign.Col>
        <AntDesign.Col Flex=@("auto")>
            <div class="back_card" style="margin-left: 0; margin-bottom: 0;">
                <Line @ref="@line" Config="lineConfig" TItem="LineDto" />
            </div>
        </AntDesign.Col>
    </Row>
    <Row Class="back_card" Justify="space-around" Align="middle">
        <AntDesign.Col Span="8">
            <Card Loading="loading">
                <Donut @ref="@donut" Config="donutConfig" TItem="CircleDto" />
            </Card>
        </AntDesign.Col>
        <AntDesign.Col Span="8">
            <Card Loading="loading">
                <Radar @ref="@radar" Config="radarConfig" TItem="CircleDto" />
            </Card>
        </AntDesign.Col>
        <AntDesign.Col Span="8">
            <Card Loading="loading">
                <Rose @ref="@rose" Config="roseConfig" TItem="CircleDto" />
            </Card>
        </AntDesign.Col>
    </Row>
</div>

<style>
    .ant-carousel .slick-slide {
        text-align: center;
        height: 100%;
        width: 100%;
        line-height: 160px;
        background: #364d79;
        overflow: hidden;
    }

        .ant-carousel .slick-slide h3 {
            color: #fff;
        }
</style>


@code {

    private IEnumerable<Record> records;
    private IEnumerable<Category> categories;
    private IEnumerable<Account> accounts;
    private IEnumerable<Record> showingRecords;
    private string period = "all";
    private double input = 0;
    private double output = 0;
    private IChartComponent donut;
    private IChartComponent radar;
    private IChartComponent rose;
    private IChartComponent line;
    private InputOrOutput type = InputOrOutput.INPUT;
    private string cORa = "category";
    private bool loading = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        records = await Http.GetFromJsonAsync<Record[]>("Api/Record/GetRecord");
        categories = await Http.GetFromJsonAsync<Category[]>("Api/Category/GetCategory");
        accounts = await Http.GetFromJsonAsync<Account[]>("Api/Account/GetAccount");
        if (records.Count() != 0)
        {
            await Filter();
        }
        else
        {
            loading = true;
        }
    }

    private async Task Filter()
    {
        DateTime now = Convert.ToDateTime(DateTime.Now.ToShortDateString());
        int days = 0;
        if (period == "month") days = 30;
        else if (period == "week") days = 7;
        else if (period == "day") days = 1;
        if (period == "all")
        {
            showingRecords = records;
        }
        else
        {
            showingRecords = records.Where(i => (now - i.CreateTime).Days < days);
        }
        await UpdateSum();
    }

    private async Task UpdateSum()
    {
        input = 0;
        output = 0;

        foreach (Record i in showingRecords)
        {
            if (i.Type == InputOrOutput.INPUT)
            {
                input += i.Value;
            }
            else if (i.Type == InputOrOutput.OUTPUT)
            {
                output += i.Value;
            }
        }
        await UpdateChartData();
        await UpdateLineData();
    }

    private async Task UpdateChartData()
    {
        if (type == InputOrOutput.INPUT && input == 0 || type == InputOrOutput.OUTPUT && output == 0)
        {
            loading = true;
            return;
        }
        else
        {
            loading = false;
        }
        List<CircleDto> data = new();
        foreach (Record i in showingRecords)
        {
            if (i.Type == type)
            {
                if (cORa == "category")
                {
                    if (!categories.Any(j => j.Id == i.Category))
                    {
                        if (data.Any(j => j.Type == ""))
                        {
                            data[data.FindIndex(j => j.Type == "")].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto("", i.Value));
                        }
                    }
                    else
                    {
                        if (data.Any(j => j.Type == categories.First(k => k.Id == i.Category).Name))
                        {
                            data[data.FindIndex(j => j.Type == categories.First(k => k.Id == i.Category).Name)].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto(categories.First(k => k.Id == i.Category).Name, i.Value));
                        }
                    }
                }
                else if (cORa == "account")
                {
                    if (!accounts.Any(j => j.Id == i.Account))
                    {
                        if (data.Any(j => j.Type == ""))
                        {
                            data[data.FindIndex(j => j.Type == "")].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto("", i.Value));
                        }
                    }
                    else
                    {
                        if (data.Any(j => j.Type == accounts.First(k => k.Id == i.Account).Name))
                        {
                            data[data.FindIndex(j => j.Type == accounts.First(k => k.Id == i.Account).Name)].Value += i.Value;
                        }
                        else
                        {
                            data.Add(new CircleDto(accounts.First(k => k.Id == i.Account).Name, i.Value));
                        }
                    }
                }

            }
        }
        if (data.Any(i => i.Type == "" || i.Type == null))
        {
            data[data.FindIndex(i => i.Type == "" || i.Type == null)].Type = "其它";
        }
        await donut.ChangeData(data);
        await donut.ChangeData(data);               //fix chart bug
        await donut.UpdateConfig(donutConfig);      //fix chart bug
        await rose.ChangeData(data);
        await radar.ChangeData(data);
    }

    private async Task UpdateLineData()
    {
        List<LineDto> data = new();
        data.AddRange(new List<LineDto>(Enumerable.Range(1, 14).Select(i => new LineDto()
        {
            date = DateTime.Today.AddDays(- (i - 1) % 7).ToShortDateString(),
            value = 0,
            type = i <= 7 ? "收入" : "支出"
        })));
        DateTime now = Convert.ToDateTime(DateTime.Now.ToShortDateString());
        for (int i = 0; i < records.Count(); i++)
        {
            Record currentRecord = records.ElementAt(i);
            int day = (now - currentRecord.CreateTime).Days;
            if (day < 7)
            {
                if (currentRecord.Type == InputOrOutput.INPUT)
                {
                    data[day].value += currentRecord.Value;
                }
                else if (currentRecord.Type == InputOrOutput.OUTPUT)
                {
                    data[day + 7].value += currentRecord.Value;
                }
            }
        }
        await line.ChangeData(data);
    }

    private readonly DonutConfig donutConfig = new DonutConfig
    {
        ForceFit = true,
        Radius = 0.8,
        Padding = "auto",
        AngleField = "value",
        ColorField = "type"
    };

    private readonly RadarConfig radarConfig = new RadarConfig
    {
        AngleField = "type",
        RadiusField = "value",
        RadiusAxis = new ValueAxis
        {
            Grid = new BaseAxisGrid
            {
                AlternateColor = new[] { "rgba(0, 0, 0, 0.04)", null }
            }
        },
        Area = new RadarViewConfigArea
        {
            Visible = false
        },
        Point = new RadarViewConfigPoint
        {
            Visible = true
        }
    };

    private readonly RoseConfig roseConfig = new RoseConfig
    {
        ForceFit = true,
        Radius = 0.8,
        RadiusField = "value",
        CategoryField = "type",
        ColorField = "type",
        Label = new RoseLabel
        {
            Visible = true,
            Type = "outer"
        }
    };

    private readonly LineConfig lineConfig = new LineConfig
    {
        Title = new AntDesign.Charts.Title
        {
            Visible = true,
            Text = "收支图"
        },
        Description = new Description
        {
            Visible = true,
            Text = ""
        },
        Padding = "auto",
        ForceFit = true,
        XField = "date",
        YField = "value",
        SeriesField = "type",
        YAxis = new ValueAxis
        {
            Label = new BaseAxisLabel()
        },
        Legend = new Legend
        {
            Position = "right-top"
        }
    };


}